// 	OpenGFX Mars Landscape and Trees
// 	Copyright (C) 2014 Zephyris, and others
// 	Contact: planetmaker@openttd.org
//
// 	This program is free software; you can redistribute it and/or modify
// 	it under the terms of the GNU General Public License as published by
// 	the Free Software Foundation; either version 2 of the License, or
// 	(at your option) any later version.
//
// 	This program is distributed in the hope that it will be useful,
// 	but WITHOUT ANY WARRANTY; without even the implied warranty of
// 	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// 	GNU General Public License for more details.
//
// 	You should have received a copy of the GNU General Public License along
// 	with this program; if not, write to the Free Software Foundation, Inc.,
// 	51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

#include "industry_templates.pnml"

// Encased power (SW, NE).
spriteset(metal_works_encased_power_sprites, "../graphics/Buildings/Industry_MetalWorks_8bpp.png") {
    SPRITE3(4, 268, 136, 4, 64, 128, -32, -98)
}
SPRITE_LAYOUT(metal_works_encased_power_sprite_layout, metal_works_encased_power_sprites, 60)
item(FEAT_INDUSTRYTILES, metal_works_encased_power_tile) {
    property {
        substitute: 0;
        land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
        accepted_cargos: [[ORES, 8]];
    }
    graphics { metal_works_encased_power_sprite_layout; }
}


// Open power (SE, NW).
spriteset(metal_works_open_power_sprites, "../graphics/Buildings/Industry_MetalWorks_8bpp.png") {
    SPRITE3(72, 268, 136, 4, 64, 128, -32, -98)
}
SPRITE_LAYOUT(metal_works_open_power_sprite_layout, metal_works_open_power_sprites, 60)
item(FEAT_INDUSTRYTILES, metal_works_open_power_tile) {
    property {
        substitute: 0;
        land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
        accepted_cargos: [[ORES, 8]];
    }
    graphics { metal_works_open_power_sprite_layout; }
}


// Central power grid.
spriteset(metal_works_power_grid_sprites, "../graphics/Buildings/Industry_MetalWorks_8bpp.png") {
    SPRITE3(140, 140, 72, 4, 64, 64, -33, -32)
}
SPRITE_LAYOUT(metal_works_power_grid_sprite_layout, metal_works_power_grid_sprites, 36)
item(FEAT_INDUSTRYTILES, metal_works_power_grid_tile) {
    property {
        substitute: 0;
        land_shape_flags: bitmask(LSF_ONLY_ON_FLAT_LAND);
        accepted_cargos: [[ORES, 8]];
    }
    graphics { metal_works_power_grid_sprite_layout; }
}

tilelayout metal_works_layout {
    1, 0: metal_works_open_power_tile;
    0, 1: metal_works_encased_power_tile;
    1, 1: metal_works_power_grid_tile;
    2, 1: metal_works_encased_power_tile;
    1, 2: metal_works_open_power_tile;
}

tilelayout metal_works_layout_1 {
    0, 0: metal_works_open_power_tile;
    0, 1: metal_works_encased_power_tile;
    1, 1: metal_works_power_grid_tile;
    2, 2: metal_works_encased_power_tile;
    1, 2: metal_works_open_power_tile;
}

tilelayout metal_works_layout_2 {
    2, 0: metal_works_open_power_tile;
    0, 1: metal_works_encased_power_tile;
    1, 1: metal_works_power_grid_tile;
    2, 0: metal_works_encased_power_tile;
    1, 2: metal_works_open_power_tile;
}

tilelayout metal_works_layout_3 {
    0, 0: metal_works_open_power_tile;
    1, 0: metal_works_open_power_tile;
    1, 1: metal_works_power_grid_tile;
    0, 2: metal_works_encased_power_tile;
    1, 2: metal_works_encased_power_tile;
}

tilelayout metal_works_layout_4 {
    0, 0: metal_works_open_power_tile;
    0, 1: metal_works_open_power_tile;
    1, 1: metal_works_power_grid_tile;
    2, 0: metal_works_encased_power_tile;
    2, 1: metal_works_encased_power_tile;
}


item(FEAT_INDUSTRIES, metal_works_industry, METAL_WORKS_ID) {
    property {
        substitute: METAL_WORKS_ID;
        name: string(STR_METAL_WORKS_NAME);
        layouts: [metal_works_layout, metal_works_layout_1, metal_works_layout_2, metal_works_layout_3, metal_works_layout_4];
        life_type: IND_LIFE_TYPE_PROCESSING;
        accept_cargo_types: [cargotype("ORES")];
        prod_cargo_types: [cargotype("BDMT")];
        prod_multiplier: [0, 0];
        min_cargo_distr: 1;
        prob_random: 10;
        prob_in_game: 10;
        spec_flags: 0;
        input_multiplier_1: [2,0];
        input_multiplier_2: [0,0];
        input_multiplier_3: [0,0];
//        prospect_chance: 10;
        nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_METAL_WORKS_STATION_NAME));
    }
}


// vim: syn=cpp sw=4 et sts=4 nospell
